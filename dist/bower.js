/*    
 * @license requirejs - plugin - bower 0.0.1
 * Copyright(c) 2014, Rodney Robert Ebanks foss@rodneyebanks.com All Rights Reserved.
 * Available via the MIT or new BSD license.
 */

(function(){"use strict";define("bower",["module","json"],function(module,json){var defaults={file:"/bower.json",baseUrl:"../bower_components",extensions:"js|css",ignore:"requirejs|requirejs-domready|requirejs-text",auto:!0},request={parent:null,config:{}},bower={settings:{},overrides:{},config:{paths:{},shim:{}},processed:{}},buildMap={},REGEX_PATH_RELATIVE=/^([^a-z|0-9]*)/,REGEX_PATH_SPLIT=/^(.*?)([^/\\]*?)(?:\.([^ :\\/.]*))?$/,REGEX_PATH_BOWER=/^(.*?bower.json)+(.*)$/;function objectKeyForEach(value,fn){Object.keys(value).forEach(fn)}function objectExtend(destination,source){return typeof source=="object"&&objectKeyForEach(source,function(value){destination[value]=source[value]}),destination}function objectKeysToArray(obj){var arr=[];return objectKeyForEach(obj,function(key){arr.push(key)}),arr}function isValidJson(str){return str===""?!1:(str=str.replace(/\\./g,"@").replace(/"[^"\\\n\r]*"/g,""),/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/.test(str))}function forEachArrayAsync(array,fn,progress
,finished){var i=0,maxBurnTime=100,finishedFn=finished||progress,progressFn=finishedFn===progress?null:progress;function iter(){var startTime=Date.now();while(i<array.length){fn.call(array,array[i],i++);if(Date.now()-startTime>maxBurnTime)return progressFn&&progressFn(i,array.length),window.setTimeout(iter,0)}progressFn&&progressFn(i,array.length),finishedFn&&finishedFn(null,array)}window.setTimeout(iter,0)}function formatBowerFilePath(name){return name=bower.settings.baseUrl+"/"+name+"/bower.json",name}function parseBowerFile(name,jsonFile,callback,root){var base,dependencies,modulePath=new RegExp(REGEX_PATH_SPLIT),relativePath=new RegExp(REGEX_PATH_RELATIVE),validExt=new RegExp("^("+bower.settings.extensions+")$"),ignoreFile=new RegExp("^("+bower.settings.ignore+")$");function addToConfig(item,name){var config={paths:{},shim:{}},path;validExt.test(item[3])&&(name=name||item[2],path=base[1]+item[1].replace(relativePath,"")+item[2],bower.config.paths[name]=config.paths[name]=path,bower.
config.shim[name]=config.shim[name]={exports:name},dependencies.length>0&&(bower.config.shim[name].deps=config.shim[name].deps=dependencies),!request.config.isBuild&&bower.settings.auto!==!1&&requirejs.config(config))}base=modulePath.exec(name),dependencies=objectKeysToArray(jsonFile.dependencies||{}),forEachArrayAsync(dependencies,function(value){return ignoreFile.test(value)||processBowerFile(formatBowerFilePath(value),request.parent,function(){},request.config),value},function(){},function(){bower.processed[name]||(Array.isArray(jsonFile.main)?jsonFile.main.forEach(function(value){addToConfig(modulePath.exec(value))}):addToConfig(modulePath.exec(jsonFile.main),jsonFile.name),bower.processed[name]=!0),root&&callback(bower.config)})}function processBowerFile(name,req,callback,config,root){return bower.processed[name]||json.load(name,req,function(jsonFile){parseBowerFile(name,jsonFile,callback,root)},config),name}return{load:function pluginLoad(name,req,onLoad,config){request.parent=req
,request.config=config,bower.settings=defaults,bower.settings=objectExtend(bower.settings,request.config.bower),bower.settings=objectExtend(bower.settings,bower.overrides),bower.settings.file=name,config.isBuild&&onload(),processBowerFile(bower.settings.file,req,function(config){buildMap[name]=config,onLoad(config)},config,!0)},normalize:function pluginNormalize(name,normalize){var inputPath=new RegExp(REGEX_PATH_BOWER);return name=inputPath.exec(name||bower.settings.file||defaults.file),isValidJson(name[2])&&(bower.overrides=JSON.parse(name[2])),name=normalize(name[1]),name},write:function pluginWrite(pluginName,moduleName,write){var content;moduleName in buildMap&&(request.settings.bower.auto?content="requirejs.config("+buildMap[moduleName]+"); return "+buildMap[moduleName]+";":content=buildMap[moduleName],write('define("'+pluginName+"!"+moduleName+'", function(){'+content+";});\n"))}}})})();
